@page "/"

<PageTitle>Index</PageTitle>

<h1>Make an account</h1>

<label>Name</label> <br />
<input type='text' @bind=newAccountName /> <br />
<button @onclick="makeCheckingAccount">Make Checking Account</button><button @onclick="makeSavingsAccount">Make Savings Account</button> <br />
<button @onclick="saveAccounts">Save Accounts</button> <br />

<h1>Account List</h1>
@if (accounts.Count == 0)
{
    <p>No accounts in list.</p>
}
@foreach (var account in accounts)
{
    <p>@account.Name: @account.Balance.ToString("c")</p>
}

<h1>-Welcome to Tic Tac Toe!-</h1>
-Pick a number 1-9 to chose where you (X) goes. The computer is O. numbers will be used to represent unfilled spaces.-
<input type='int' @bind=selection /> <br />
<button @onclick='playerturn'>Confirm turn</button>
<p> @board[0] | @board[1] | @board[2] </p>
<p> @board[3] | @board[4] | @board[5] </p>
<p> @board[6] | @board[7] | @board[8] </p>
<p> @victory </p>
@code {
  char[] board = new char[9] { '1', '2', '3', '4', '5', '6', '7', '8', '9' };
  char[] trueboard = new char[9] { 'U', 'U', 'U', 'U', 'U', 'U', 'U', 'U', 'U' };
  int selection;
  string victory;
  public void playerturn()
  {
    try
    {
      if (trueboard[selection - 1] == 'U')
      {
        board[selection - 1] = 'X';
        trueboard[selection - 1] = 'X';
        if(checkWin(trueboard) == 1)
        {
          victory = "You have Won!!!";
        }
        else if(checkWin(trueboard) == 2)
        {
          victory = "You lost :(";
        }
        else if(checkWin(trueboard) == 0)
        {
          ComputerTurn();
        }
      }
    }
    catch
    {
    }
  }
  public void ComputerTurn()
  {
    Random generator = new Random();
    int a = generator.Next(0,9);
    int b = 0;
    if(trueboard[a] == 'U')
    {
      trueboard[a] = 'O';
      board[a] = 'O';
    }
    else
    {
      b = b+1;
      if(b<=10)
      {
        ComputerTurn();
      }
    }
  }
  public void OnInitalized()
  {
  }
  public static int checkWin(char[] board)
  {
  if(board[0] == 'X' && board[1] == 'X' && board[2] == 'X')
  {
  return 1;
  }
  else if(board[3] == 'X' && board[4] == 'X' && board[5] == 'X')
  {
  return 1;
  }
  else if(board[6] == 'X' && board[7] == 'X' && board[8] == 'X')
  {
  return 1;
  }
  else if(board[0] == 'X' && board[3] == 'X' && board[6] == 'X')
  {
  return 1;
  }
  else if(board[1] == 'X' && board[4] == 'X' && board[7] == 'X')
  {
  return 1;
  }
  else if(board[2] == 'X' && board[5] == 'X' && board[8] == 'X')
  {
  return 1;
  }
  else if(board[0] == 'X' && board[4] == 'X' && board[8] == 'X')
  {
  return 1;
  }
  else if(board[2] == 'X' && board[4] == 'X' && board[6] == 'X')
  {
  return 1;
  }
  else if(board[0] == 'O' && board[1] == 'O' && board[2] == 'O')
  {
  return 2;
  }
  else if(board[3] == 'O' && board[4] == 'O' && board[5] == 'O')
  {
  return 2;
  }
  else if(board[6] == 'O' && board[7] == 'O' && board[8] == 'O')
  {
  return 2;
  }
  else if(board[0] == 'O' && board[3] == 'O' && board[6] == 'O')
  {
  return 2;
  }
  else if(board[1] == 'O' && board[4] == 'O' && board[7] == 'O')
  {
  return 2;
  }
  else if(board[2] == 'O' && board[5] == 'O' && board[8] == 'O')
  {
  return 2;
  }
  else if(board[0] == 'O' && board[4] == 'O' && board[8] == 'O')
  {
  return 2;
  }
  else if(board[2] == 'O' && board[4] == 'O' && board[6] == 'O')
  {
  return 2;
  }
  return 0;
  }
}

@code
{
    protected override void OnInitialized()
    {
        if (File.Exists("accounts.txt"))
        {
            accounts = Account.Load("accounts.txt");
        }
    }

    string newAccountName;
    List<Account> accounts = new();

    private void makeCheckingAccount()
    {
        accounts.Add(new CheckingAccount(newAccountName, CheckingAccountLevel.HighRoller));
        newAccountName = null;
    }

    private void makeSavingsAccount()
    {
        accounts.Add(new SavingsAccount(newAccountName));
        newAccountName = null;
    }

    private void saveAccounts()
    {
        using (var writer = new StreamWriter("accounts.txt"))
        {
            foreach (var account in accounts)
            {
                account.Save(writer);
            }
            writer.Close();
        }
    }
}